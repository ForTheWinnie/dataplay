{"ast":null,"code":"var _jsxFileName = \"/Users/winnie/Documents/dataplay/src/components/Map/Map.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"../../useResizeObserver\";\nimport \"./Map.css\";\n/**\n * Component that renders a map of D.C.\n */\n\nfunction Map({\n  data,\n  property\n}) {\n  const svgMapRef = useRef();\n  const wrapperMapRef = useRef();\n  const dimensions = useResizeObserver(wrapperMapRef);\n  const [SelectedNeighborhood, setSelectedNeighborhood] = useState(null);\n  useEffect(() => {\n    const svg = select(svgMapRef.current); // minimum and max values of each neighborhood & apply color scale\n\n    const minProperty = min(data.features, feature => feature.properties[property]);\n    const maxProperty = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear().domain([minProperty, maxProperty]).range([\"#ccc\", \"#008080\"]); // dimensions of the map (fallback with getBoundingClientRect since dimensions are null initially)\n\n    const {\n      width,\n      height\n    } = dimensions || wrapperMapRef.current.getBoundingClientRect(); // render coord into px values via d3's geoMercator projection while fitting map in svg; increase quality of zoom in/out with .precision\n\n    const projection = geoMercator().fitSize([width, height], SelectedNeighborhood || data); // transform .geo.json data into shapes \n\n    const pathGenerator = geoPath().projection(projection);\n\n    function mouseMove(d, i) {\n      svg.selectAll(\".label\").join(\"text\").attr(\"class\", \"label\").text(d.properties.name).attr(\"x\", 305).attr(\"y\", 25);\n    } // render each neighborhood\n\n\n    svg.selectAll(\".neighborhood\").data(data.features).join(\"path\").on(\"click\", feature => {\n      setSelectedNeighborhood(SelectedNeighborhood === feature ? null : feature);\n    }).on(\"mousemove\", mouseMove).attr(\"class\", \"neighborhood\").transition().duration(1000).attr(\"fill\", feature => colorScale(feature.properties[property])).attr(\"d\", feature => pathGenerator(feature)); // render text when clicked in neighborhood\n\n    svg.selectAll(\".label\").data([SelectedNeighborhood]).join(\"text\").attr(\"class\", \"label\").text(feature => feature && feature.properties.name + \": \" + feature.properties[property].toLocaleString()).attr(\"x\", 205).attr(\"y\", 25);\n  }, [data, dimensions, property, SelectedNeighborhood]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapperMapRef,\n    className: \"wrapperMap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgMapRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/winnie/Documents/dataplay/src/components/Map/Map.js"],"names":["React","useRef","useEffect","useState","select","geoPath","geoMercator","min","max","scaleLinear","useResizeObserver","Map","data","property","svgMapRef","wrapperMapRef","dimensions","SelectedNeighborhood","setSelectedNeighborhood","svg","current","minProperty","features","feature","properties","maxProperty","colorScale","domain","range","width","height","getBoundingClientRect","projection","fitSize","pathGenerator","mouseMove","d","i","selectAll","join","attr","text","name","on","transition","duration","toLocaleString"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"../../useResizeObserver\";\nimport \"./Map.css\";\n\n/**\n * Component that renders a map of D.C.\n */\n\nfunction Map({ data, property }) {\n    const svgMapRef = useRef();\n    const wrapperMapRef = useRef();\n    const dimensions = useResizeObserver(wrapperMapRef);\n    const [SelectedNeighborhood, setSelectedNeighborhood] = useState(null);\n  \n    useEffect(() => {\n      const svg = select(svgMapRef.current);\n  \n      // minimum and max values of each neighborhood & apply color scale\n      const minProperty = min(data.features, feature => feature.properties[property]);\n      const maxProperty = max(data.features, feature => feature.properties[property]);\n      const colorScale = scaleLinear()\n        .domain([minProperty, maxProperty])\n        .range([\"#ccc\", \"#008080\"]);\n\n      \n      // dimensions of the map (fallback with getBoundingClientRect since dimensions are null initially)\n      const { width, height } =\n       dimensions || wrapperMapRef.current.getBoundingClientRect();\n  \n      // render coord into px values via d3's geoMercator projection while fitting map in svg; increase quality of zoom in/out with .precision\n      const projection = geoMercator()\n        .fitSize([width, height], SelectedNeighborhood || data);\n  \n      // transform .geo.json data into shapes \n      const pathGenerator = geoPath().projection(projection);\n\n      function mouseMove(d,i) {\n        svg.selectAll(\".label\")\n          .join(\"text\")\n          .attr(\"class\", \"label\")\n          .text(d.properties.name)\n          .attr(\"x\", 305)\n          .attr(\"y\", 25);\n      }\n      // render each neighborhood\n      svg.selectAll(\".neighborhood\")\n        .data(data.features)\n        .join(\"path\")\n        .on(\"click\", feature => {\n          setSelectedNeighborhood(SelectedNeighborhood === feature ? null : feature);\n        })\n        .on(\"mousemove\", mouseMove)\n        .attr(\"class\", \"neighborhood\")\n        .transition()\n        .duration(1000)\n        .attr(\"fill\", feature => colorScale(feature.properties[property]))\n        .attr(\"d\", feature => pathGenerator(feature));\n\n      // render text when clicked in neighborhood\n      svg.selectAll(\".label\").data([SelectedNeighborhood])\n        .join(\"text\")\n        .attr(\"class\", \"label\")\n        .text(\n          feature =>\n            feature &&\n            feature.properties.name +\n              \": \" +\n              feature.properties[property].toLocaleString()\n        )\n        .attr(\"x\", 205)\n        .attr(\"y\", 25);\n    }, [data, dimensions, property, SelectedNeighborhood]);\n  \n    return (\n      <div ref={wrapperMapRef} className=\"wrapperMap\">\n        <svg ref={svgMapRef}></svg>\n      </div>\n    );\n  }\nexport default Map;"]},"metadata":{},"sourceType":"module"}